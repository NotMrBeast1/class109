# -*- coding: utf-8 -*-
""".ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvprAKA1951DOnaeVdq44YlXZyLtVHZH
"""

import plotly.figure_factory as ff
import plotly.graph_objects as go
import pandas as pd
import statistics
import csv

pf = pd.read_csv("height-weight.csv")
height_list = pf["Height(Inches)"].tolist()
weight_list = pf["Weight(Pounds)"].tolist()

height_mean = statistics.mean(height_list)
weight_mean = statistics.mean(weight_list)

height_median = statistics.median(height_list)
weight_median = statistics.median(weight_list)

print("Mean, Median, Mode of Height is {}, {} respectively".format(height_mean, height_median))
print("Mean, Median, Mode of Weight is {}, {} respectively".format(weight_mean, weight_median))

height_std_deviation = statistics.stdev(height_list)
weight_std_deviation = statistics.stdev(weight_list)

height_first_std_deviation_start, height_first_std_deviation_end = height_mean-height_std_deviation,height_mean+height_std_deviation
height_second_std_deviation_start, height_second_std_deviation_end = height_mean-(2*height_std_deviation),height_mean+(2*height_std_deviation)
height_third_std_deviation_start, height_third_std_deviation_end = height_mean-(3*height_std_deviation),height_mean+(3*height_std_deviation)

weight_first_std_deviation_start, weight_first_std_deviation_end = weight_mean-height_std_deviation,weight_mean+weight_std_deviation
weight_second_std_deviation_start, weight_second_std_deviation_end = weight_mean-(2*weight_std_deviation),weight_mean+(2*weight_std_deviation)
weight_third_std_deviation_start, weight_third_std_deviation_end = weight_mean-(3*weight_std_deviation),weight_mean+(3*weight_std_deviation)

height_list_of_data_with_1_std_deviation = [result for result in height_list if result > height_first_std_deviation_start<height_first_std_deviation_end]
height_list_of_data_with_2_std_deviation = [result for result in height_list if result > height_second_std_deviation_start<height_second_std_deviation_end]
height_list_of_data_with_3_std_deviation = [result for result in height_list if result > height_third_std_deviation_start<height_third_std_deviation_end]

weight_list_of_data_with_1_std_deviation = [result for result in weight_list if result > weight_first_std_deviation_start<weight_first_std_deviation_end]
weight_list_of_data_with_2_std_deviation = [result for result in weight_list if result > weight_second_std_deviation_start<weight_second_std_deviation_end]
weight_list_of_data_with_3_std_deviation = [result for result in weight_list if result > weight_third_std_deviation_start<weight_third_std_deviation_end]

print("{}% of data for height lies within first standard deviation".format(len(height_list_of_data_with_1_std_deviation)*100.0/len(height_list)))
print("{}% of data for height lies within second standard deviation".format(len(height_list_of_data_with_2_std_deviation)*100.0/len(height_list)))
print("{}% of data for height lies within third standard deviation".format(len(height_list_of_data_with_3_std_deviation)*100.0/len(height_list)))

print("{}% of data for weight lies within first standard deviation".format(len(weight_list_of_data_with_1_std_deviation)*100.0/len(weight_list)))
print("{}% of data for weight lies within second standard deviation".format(len(weight_list_of_data_with_2_std_deviation)*100.0/len(weight_list)))
print("{}% of data for weight lies within third standard deviation".format(len(weight_list_of_data_with_3_std_deviation)*100.0/len(weight_list)))